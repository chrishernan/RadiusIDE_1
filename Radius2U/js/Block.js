// Generated by CoffeeScript 1.10.0
(function() {
  var Block, Radius, TheBlockList, barStack, blockIndent, closeEnoughToAttach;

  Radius = window.Radius;

  TheBlockList = Radius.TheBlockList;

  Block = Radius.Block;

  blockIndent = 15;

  closeEnoughToAttach = 10;

  barStack = [];

  Radius.BlockList = (function() {
    function BlockList() {
      this.blocks = [];
      this.functions = [];
    }

    BlockList.prototype.addBlock = function(block1) {
      return this.blocks.push(block1);
    };

    BlockList.prototype.deleteBlock = function(block) {
      var n;
      n = this.blocks.indexOf(block);
      if (n === -1) {
        return console.log("**ERROR** in BlockList.deleteBlock, could not find", block, "in", this);
      } else {
        return this.blocks.splice(n, 1);
      }
    };

    BlockList.prototype.getStartBlock = function() {
      var bl, j, len, ref;
      ref = this.blocks;
      for (j = 0, len = ref.length; j < len; j++) {
        bl = ref[j];
        if (bl.list[0].name === 'Start') {
          return bl;
        }
      }
      console.log('**getStartBlock returns null');
      return null;
    };

    BlockList.prototype.display = function() {
      var b, bl, i, j, k, l, len, len1, len2, out, ref, ref1, ref2, results;
      console.log('--------', this.blocks.length, 'blocks --------');
      ref = this.blocks;
      for (j = 0, len = ref.length; j < len; j++) {
        bl = ref[j];
        bl.blockDisplay();
      }
      return;
      ref1 = this.blocks;
      results = [];
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        bl = ref1[i];
        out = "blk " + i + " ";
        ref2 = bl.list;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          b = ref2[l];
          out += b.id + " " + b.name + ", ";
        }
        results.push(console.log(out));
      }
      return results;
    };

    BlockList.prototype.loadFromStorage = function(o) {
      return $('#ProgrammingPane').empty();
    };

    return BlockList;

  })();

  Radius.Block = (function() {
    function Block(box) {
      var b, j, len, ref;
      this.list = [];
      if (box != null) {
        if (Array.isArray(box)) {
          this.list = box;
          ref = this.list;
          for (j = 0, len = ref.length; j < len; j++) {
            b = ref[j];
            b.parentBlock = this;
          }
        } else {
          this.list.push(box);
          box.parentBlock = this;
        }
      }
      this.isABox = false;
      this.parentBlock = null;
    }

    Block.prototype.moveTo = function(box, newX, newY) {
      if (box === this.list[0]) {
        return this.lineUpBlock(newX, newY);
      } else {
        return console.log("***ERROR*** in Block.moveTo, not first box", box, "in", this);
      }
    };

    Block.prototype.lineUpBlock = function(xStart, yStart) {
      var b, blockBottom, j, len, ref, theBar, xPos, yPos;
      if (this.list.length === 0) {
        return yStart + 20;
      }
      if ((xStart != null) && (yStart != null)) {
        xPos = xStart;
        yPos = yStart;
      } else {
        if (this.parentBlock != null) {
          return this.parentBlock.lineUpBlock();
        }
        xPos = this.list[0].x;
        yPos = this.list[0].y;
      }
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        if (b.isABox) {
          b.setPos(xPos, yPos);
          if (b.name === 'bar') {
            barStack.push(b);
          } else {
            yPos = b.getBottom() - 1;
          }
        } else {
          blockBottom = b.lineUpBlock(xPos + blockIndent, yPos);
          yPos = blockBottom;
          if (barStack.length > 0) {
            theBar = barStack.pop();
            $('#' + theBar.id).height(yPos - theBar.y);
          }
        }
      }
      return yPos;
    };

    Block.prototype.split = function(box) {
      var n, newBlock, newList;
      n = this.list.indexOf(box);
      if (n === 0) {
        if (this.parentBlock != null) {
          n = this.parentBlock.list.indexOf(this);
          if (n === -1) {
            console.log("**ERROR** in Block.split, could not find", this, "in", this.parentBLock);
          } else {
            newBlock = new Block();
            newBlock.parentBlock = this.parentBlock;
            this.parentBlock.list.splice(n, 1, newBlock);
            this.parentBlock = null;
            Radius.TheBlockList.addBlock(this);
            barStack = [];
            newBlock.parentBlock.lineUpBlock();
            return;
          }
        } else {
          return;
        }
      }
      if (n === -1) {
        console.log("**ERROR** in Block.split, could not find", box, "in", this);
        return;
      }
      newList = this.list.splice(n, 9999);
      newBlock = new Block(newList);
      console.log('in split, newblock:', n);
      newBlock.blockDisplay();
      newBlock.lineUpBlock();
      Radius.TheBlockList.addBlock(newBlock);
    };

    Block.prototype.append = function(box1, box2) {
      var b, box2Parent, insertBlock, insertLoc, j, len, ref;
      box2Parent = box2.parentBlock;
      insertLoc = this.list.indexOf(box1);
      if (insertLoc === -1) {
        console.log("***ERROR*** in Block.append, could not find", box1, "in", this);
        return;
      }
      if (box1.name === 'while' || box1.name === 'if' || box1.name === 'function') {
        insertBlock = this.list[insertLoc + 2];
        insertLoc = -1;
      } else {
        insertBlock = this;
      }
      ref = box2Parent.list;
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        insertLoc++;
        insertBlock.list.splice(insertLoc, 0, b);
        b.parentBlock = insertBlock;
      }
      Radius.TheBlockList.deleteBlock(box2Parent);
      barStack = [];
      return this.lineUpBlock();
    };

    Block.prototype.add = function(boxOrBlock) {
      boxOrBlock.parentBlock = this;
      this.list.push(boxOrBlock);
      barStack = [];
      return this.lineUpBlock();
    };

    Block.prototype.deleteBlock = function() {
      this.delete1();
      if (this.list[0].name === "Start") {
        this.list.splice(1, this.list.length);
        return $('#' + this.list[0].id).animate({
          left: 20,
          top: 20
        }, 600, (function(_this) {
          return function() {
            _this.list[0].setPos(20, 20);
            return _this.list[0].target();
          };
        })(this));
      } else {
        return Radius.TheBlockList.deleteBlock(this);
      }
    };

    Block.prototype.delete1 = function() {
      var b, j, len, ref, results;
      ref = this.list;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        if (b.isABox) {
          if (b.name !== "Start") {
            $('#' + b.id).fadeOut("normal", (function(_this) {
              return function() {
                return $('#' + b.id).remove();
              };
            })(this));
            results.push(b.deleted = true);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(b.delete1());
        }
      }
      return results;
    };

    Block.prototype.flagAsDragged = function() {
      var b, j, len, ref;
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        if (b.isABox) {
          $('#' + b.id).addClass('beingDragged');
        } else {
          b.flagAsDragged();
        }
      }
    };

    Block.prototype.remove = function(box) {
      var n;
      n = this.list.indexOf(box);
      if (n === -1) {
        return console.log("**ERROR** in Block.remove, could not find", box, "in", this);
      } else {
        return this.list.splice(n, 1);
      }
    };

    Block.prototype.addEnd = function() {
      if (this.list.length > 1) {
        console.log("**ERROR** in Block.addEnd, @list is too long:", this.list.length);
        return;
      }
      this.add(new Radius.Box('bar', 'ProgrammingPane'));
      this.add(new Block());
      return this.add(new Radius.Box('endwhile', 'ProgrammingPane'));
    };

    Block.prototype.find = function(id) {};

    Block.prototype.boxList = function() {
      return this.list;
    };

    Block.prototype.getParms = function() {
      var box, j, len, ref, results;
      ref = this.boxes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        box = ref[j];
        results.push(box.getParms());
      }
      return results;
    };

    Block.prototype.findAttachable = function(movingBox) {
      var attBox, b, boxOrBlock, j, len, ref, x1, y1;
      x1 = movingBox.x;
      y1 = movingBox.y;
      if (movingBox.isAPrototype) {
        x1 += $('#PrototypesPane').offset().left - $('#ProgrammingPane').offset().left;
        y1 += $('#PrototypesPane').offset().top - $('#ProgrammingPane').offset().top;
      }
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        boxOrBlock = ref[j];
        if (boxOrBlock.isABox) {
          b = boxOrBlock;
          if (b !== movingBox && !b.deleted && b.name !== 'bar' && y1 <= b.getBottom() + closeEnoughToAttach && y1 >= b.y - closeEnoughToAttach && x1 >= b.x - closeEnoughToAttach && x1 <= b.getRight() + closeEnoughToAttach && movingBox.okToAttach(b)) {
            return b;
          }
        } else {
          attBox = boxOrBlock.findAttachable(movingBox);
          if (attBox != null) {
            return attBox;
          }
        }
      }
      return null;
    };

    Block.prototype.blockDisplay = function(d) {
      var b, j, len, ref, results;
      if (d == null) {
        d = '>';
        if (this.list.length > 0) {
          console.log('at (', this.list[0].x, this.list[0].y, ')');
        }
      }
      if (this.list.length === 0) {
        console.log(d, '--empty block--');
        return;
      }
      ref = this.list;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        if (b.isABox) {
          results.push(console.log(d, b.name, b.parm1, b.parm2));
        } else {
          results.push(b.blockDisplay(d + ' >'));
        }
      }
      return results;
    };

    return Block;

  })();

}).call(this);
