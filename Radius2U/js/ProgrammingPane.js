// Generated by CoffeeScript 1.10.0
(function() {
  var Block, Box, Radius, TheBlockList, changes, clickToSelect, generateCode2, generateCodeLine, radCode, selectionRectExists, spaces;

  Radius = window.Radius;

  Block = Radius.Block;

  Box = Radius.Box;

  TheBlockList = Radius.TheBlockList;

  Radius.blocksVisible = true;

  Radius.dragInProgress = false;

  Radius.copyBuffer = [];

  Radius.copyDeltaX = 30;

  Radius.copyDeltaY = 30;

  changes = true;

  clickToSelect = true;

  selectionRectExists = false;

  Radius.clearProgrammingPane = function() {
    Radius.TheBlockList = new Radius.BlockList();
    return $('#ProgrammingPane').empty();
  };

  Radius.overlaps = function(left1, top1, right1, bottom1, left2, top2, right2, bottom2) {
    if (right2 < left1 || right1 < left2 || bottom2 < top1 || bottom1 < top2) {
      return false;
    } else {
      return true;
    }
  };

  Radius.ProgrammingPaneOnReady = function() {
    console.log("in Radius.ProgrammingPaneOnReady");
    $('#ProgrammingPane').on("click", ".parm", function(event) {
      return $(this).focus();
    });
    $('#ProgrammingPane').on("click", ".parm2", function(event) {
      return $(this).focus();
    });
    $('#ProgrammingPane').on("blur", "div.editable", function(event) {
      return console.log('blur which', event.which, 'text', $(event.target).text(), 'html', $(event.target).html());
    });
    $('#ProgrammingPane').on("blur", ".parm", function(event) {
      var parentBox, parentID;
      parentID = $(event.target).parent().attr('id');
      parentBox = Radius.TheBlockList.findBoxByID(parentID);
      return parentBox.parm1 = $(event.target).text();
    });
    $('#ProgrammingPane').on("blur", ".parm2", function(event) {
      var parentBox, parentID;
      parentID = $(event.target).parent().attr('id');
      parentBox = Radius.TheBlockList.findBoxByID(parentID);
      return parentBox.parm2 = $(event.target).text();
    });
    $('#ProgrammingPane').on("keyup", "div.errorParm", function(event) {
      return Radius.clearErrors(true);
    });
    $('#ProgrammingPane').on("mousedown", ".draghandle", function(event) {
      Radius.clearErrors(true);
      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        if ($(this).parent().hasClass("selected")) {
          return clickToSelect = false;
        }
      }
    });
    $('#ProgrammingPane').on("mousedown", null, function(event) {
      if (event.shiftKey) {
        console.log('blocksVisible', Radius.blocksVisible);
        if (Radius.blocksVisible) {
          Radius.blocksVisible = false;
          $('#ProgrammingPane .box').addClass('boxFadedOut');
          $('#ProgrammingPane .startBox').addClass('startBoxFadedOut');
          $('#ProgrammingPane .bar').addClass('barFadedOut');
          $('#ProgrammingPane .parm').addClass('parmFadedOut');
          return $('#ProgrammingPane .swoopTarget').addClass('swoopTargetFadedOut');
        } else {
          Radius.blocksVisible = true;
          $('#ProgrammingPane .boxFadedOut').removeClass('boxFadedOut');
          $('#ProgrammingPane .startBoxFadedOut').removeClass('startBoxFadedOut');
          $('.barFadedOut').removeClass('barFadedOut');
          $('.parmFadedOut').removeClass('parmFadedOut');
          return $('.swoopTargetFadedOut').removeClass('swoopTargetFadedOut');
        }
      }
    });
    $('#ProgrammingPane').on("mousedown", null, function(event) {
      var startX, startY;
      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        return;
      }
      startX = event.pageX - $('#ProgrammingPane').offset().left;
      startY = event.pageY - $('#ProgrammingPane').offset().top;
      $('.selected').removeClass('selected');
      selectionRectExists = true;
      $("<div id='selectionRect' class='selectionRect'</div>").appendTo($("#ProgrammingPane"));
      return $('#ProgrammingPane').on("mousemove", null, function(event) {
        var currX, currY, rheight, rleft, rtop, rwidth;
        if (Radius.dragInProgress) {
          $('#ProgrammingPane').off("mousemove");
          $('#selectionRect').remove();
          return;
        }
        currX = event.pageX - $('#ProgrammingPane').offset().left;
        currY = event.pageY - $('#ProgrammingPane').offset().top;
        rleft = Math.min(startX, currX);
        rtop = Math.min(startY, currY);
        rwidth = Math.abs(startX - currX);
        rheight = Math.abs(startY - currY);
        $('#selectionRect').css({
          left: rleft,
          top: rtop,
          width: rwidth,
          height: rheight
        });
        $('.selected').removeClass('selected');
        return $('#ProgrammingPane .box').each(function(index, element) {
          var mybox;
          mybox = Radius.TheBlockList.findBoxByID(this.id);
          if (mybox == null) {
            console.log('mybox is ', mybox, "this.id:", this.id);
          }
          if (mybox.name !== 'Start' && (!mybox.name.startsWith('end')) && Radius.overlaps(mybox.x, mybox.y, mybox.getRight(), mybox.getBottom(), rleft, rtop, rleft + rwidth, rtop + rheight)) {
            $(this).addClass('selected');
            if (mybox.name === "if" || mybox.name === 'while' || mybox.name === 'function') {
              $('#' + mybox.matchingEnd().id).addClass('selected');
              return $('#' + mybox.matchingBar().id).addClass('selected');
            }
          }
        });
      });
    });
    $('#ProgrammingPane').on("mouseup", null, function(event) {
      if (selectionRectExists) {
        $('#ProgrammingPane').off("mousemove");
        $('#selectionRect').remove();
        selectionRectExists = false;
      }
      return true;
    });
    return $('body').on("keydown", null, function(event) {
      var block, i, info, j, len, len1, ref, ref1;
      if (event.which === 67 && (event.altKey || event.ctrlKey || event.metaKey)) {
        Radius.copyBuffer = [];
        ref = Radius.TheBlockList.getAllBlocks();
        for (i = 0, len = ref.length; i < len; i++) {
          block = ref[i];
          console.log("**, seq", block.seq, block.list.length, block.list);
          block.copySelectedBoxes();
        }
        $('.lastPasted').removeClass('lastPasted');
        Radius.copyDeltaX = 30;
        Radius.copyDeltaY = 30;
        ref1 = Radius.copyBuffer;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          info = ref1[j];
          console.log('buf:', info.type, info.boxName);
        }
      } else if (event.which === 86 && (event.altKey || event.ctrlKey || event.metaKey)) {
        Radius.TheBlockList.getStartBlock().insertCopyBufferBoxes();
        Radius.copyDeltaX += 30;
        Radius.copyDeltaY += 30;
        Radius.TheBlockList.display();
      }
      return true;
    });
  };

  radCode = "";

  Radius.generateCode = function() {
    console.log("in ProgrammingPane's Radius.generateCode");
    radCode = "";
    Radius.allBoxes.getParms();
    generateCode2(Radius.Box.startBox, 0);
    if (radCode.length === 0) {
      console.log("No code generated.");
    }
    return radCode;
  };

  spaces = function(n) {
    if (n >= 5) {
      return "          ";
    }
    if (n === 4) {
      return "        ";
    }
    if (n === 3) {
      return "      ";
    }
    if (n === 2) {
      return "    ";
    }
    if (n === 1) {
      return "  ";
    }
    return "";
  };

  generateCode2 = function(box, level) {
    var currBox, results;
    currBox = box;
    results = [];
    while (currBox != null) {
      radCode += (spaces(level)) + (generateCodeLine(currBox));
      if (currBox.name === 'while') {
        generateCode2(currBox.nextBox, level + 1);
        results.push(currBox = currBox.end);
      } else if (currBox.name === 'if') {
        generateCode2(currBox.nextBox, level + 1);
        if (currBox["else"] != null) {
          generateCode2(currBox["else"], level);
        }
        results.push(currBox = currBox.end);
      } else if (currBox.name === 'else') {
        generateCode2(currBox.nextBox, level + 1);
        results.push(currBox = null);
      } else {
        if (currBox.nextBox != null) {
          results.push(currBox = currBox.nextBox);
        } else {
          results.push(currBox = null);
        }
      }
    }
    return results;
  };

  generateCodeLine = function(box) {
    switch (box.name) {
      case 'Start':
        return "";
      case 'show':
        return '##' + box.id + ' #SHOW ' + box.parm1 + ' #ENDSHOW\n';
      case 'clear':
        return '##' + box.id + ' #CLEAR #ENDCLEAR\n';
      case 'while':
        return '##' + box.id + ' #WHILE ' + box.parm1 + ' #ENDCONDITION\n';
      case 'endwhile':
        return '##' + box.id + ' #ENDWHILE\n';
      case 'if':
        return '##' + box.id + ' #IF ' + box.parm1 + ' #ENDCONDITION\n';
      case 'endif':
        return '##' + box.id + ' #ENDIF\n';
      case 'else':
        return '##' + box.id + ' #ELSE\n';
      case 'assign':
        return '##' + box.id + ' #ASSIGN ' + box.parm1 + ' #GETS ' + box.parm2 + ' #ENDASSIGN\n';
      case 'functiondef':
        return '##' + box.id + ' #FUNCTION ' + box.parm1 + ' #ENDNAME ' + box.parm2 + ' #ENDPARMS\n';
      case 'do':
        return '##' + box.id + ' #FUNCDO ' + box.parm1 + ' #ENDFUNCDO\n';
      case 'return':
        return '##' + box.id + ' #RETURN ' + box.parm1 + ' #ENDRETURN\n';
      default:
        console.log("unknown in generateCodeLine:", box.name);
    }
    return '';
  };

  Radius.showError = function(id, whichParm, startPos, length, message) {
    var errorBox, errorLeft, errorTop;
    errorBox = Radius.allBoxes.find(id);
    errorBox.flagError(whichParm, startPos, length);
    errorTop = errorBox.y;
    errorLeft = errorBox.getRight() + 8;
    return $('#ProgrammingPane').append('<div class="errorMessageBox" ' + 'style="top: ' + errorTop + 'px; left: ' + errorLeft + 'px;">' + message + '</div>');
  };

  Radius.clearErrors = function(fadeOutSlowly) {
    $('.errorParm').removeClass('errorParm');
    $('.errorEmptyParm').removeClass('errorEmptyParm');
    $('.errorTextHighlight').removeClass('errorTextHighlight');
    if (fadeOutSlowly) {
      return $(".errorMessageBox").fadeOut(1000, function() {
        return $(this).remove();
      });
    } else {
      return $(".errorMessageBox").remove();
    }
  };

}).call(this);
