// Generated by CoffeeScript 1.10.0
(function() {
  var Block, Box, Radius, TheBlockList, changes, clickToSelect, generateCode2, generateCodeLine, radCode, spaces;

  Radius = window.Radius;

  Block = Radius.Block;

  Box = Radius.Box;

  TheBlockList = Radius.TheBlockList;

  changes = true;

  clickToSelect = true;

  Radius.ProgrammingPaneOnReady = function() {
    var startBlock;
    console.log("in Radius.ProgrammingPaneOnReady");
    $('#ProgrammingPane').on("click", ".parm", function(event) {
      return $(this).focus();
    });
    $('#ProgrammingPane').on("click", ".parm2", function(event) {
      return $(this).focus();
    });
    $('#ProgrammingPane').on("keyup", "div.errorParm", function(event) {
      return Radius.clearErrors(true);
    });
    $('#ProgrammingPane').on("mousedown", ".draghandle", function(event) {
      Radius.clearErrors(true);
      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        if ($(this).parent().hasClass("selected")) {
          return clickToSelect = false;
        }
      }
    });
    return startBlock = Radius.TheBlockList.getStartBlock();
  };

  radCode = "";

  Radius.generateCode = function() {
    console.log("in ProgrammingPane's Radius.generateCode");
    radCode = "";
    Radius.allBoxes.getParms();
    generateCode2(Radius.Box.startBox, 0);
    if (radCode.length === 0) {
      console.log("No code generated.");
    }
    return radCode;
  };

  spaces = function(n) {
    if (n >= 5) {
      return "          ";
    }
    if (n === 4) {
      return "        ";
    }
    if (n === 3) {
      return "      ";
    }
    if (n === 2) {
      return "    ";
    }
    if (n === 1) {
      return "  ";
    }
    return "";
  };

  generateCode2 = function(box, level) {
    var currBox, results;
    currBox = box;
    results = [];
    while (currBox != null) {
      radCode += (spaces(level)) + (generateCodeLine(currBox));
      if (currBox.name === 'while') {
        generateCode2(currBox.nextBox, level + 1);
        results.push(currBox = currBox.end);
      } else if (currBox.name === 'if') {
        generateCode2(currBox.nextBox, level + 1);
        if (currBox["else"] != null) {
          generateCode2(currBox["else"], level);
        }
        results.push(currBox = currBox.end);
      } else if (currBox.name === 'else') {
        generateCode2(currBox.nextBox, level + 1);
        results.push(currBox = null);
      } else {
        if (currBox.nextBox != null) {
          results.push(currBox = currBox.nextBox);
        } else {
          results.push(currBox = null);
        }
      }
    }
    return results;
  };

  generateCodeLine = function(box) {
    switch (box.name) {
      case 'Start':
        return "";
      case 'show':
        return '##' + box.id + ' #SHOW ' + box.parm1 + ' #ENDSHOW\n';
      case 'clear':
        return '##' + box.id + ' #CLEAR #ENDCLEAR\n';
      case 'while':
        return '##' + box.id + ' #WHILE ' + box.parm1 + ' #ENDCONDITION\n';
      case 'endwhile':
        return '##' + box.id + ' #ENDWHILE\n';
      case 'if':
        return '##' + box.id + ' #IF ' + box.parm1 + ' #ENDCONDITION\n';
      case 'endif':
        return '##' + box.id + ' #ENDIF\n';
      case 'else':
        return '##' + box.id + ' #ELSE\n';
      case 'assign':
        return '##' + box.id + ' #ASSIGN ' + box.parm1 + ' #GETS ' + box.parm2 + ' #ENDASSIGN\n';
      case 'functiondef':
        return '##' + box.id + ' #FUNCTION ' + box.parm1 + ' #ENDNAME ' + box.parm2 + ' #ENDPARMS\n';
      case 'do':
        return '##' + box.id + ' #FUNCDO ' + box.parm1 + ' #ENDFUNCDO\n';
      case 'return':
        return '##' + box.id + ' #RETURN ' + box.parm1 + ' #ENDRETURN\n';
      default:
        console.log("unknown in generateCodeLine:", box.name);
    }
    return '';
  };

  Radius.showError = function(id, whichParm, startPos, length, message) {
    var errorBox, errorLeft, errorTop;
    errorBox = Radius.allBoxes.find(id);
    errorBox.flagError(whichParm, startPos, length);
    errorTop = errorBox.y;
    errorLeft = errorBox.getRight() + 8;
    return $('#ProgrammingPane').append('<div class="errorMessageBox" ' + 'style="top: ' + errorTop + 'px; left: ' + errorLeft + 'px;">' + message + '</div>');
  };

  Radius.clearErrors = function(fadeOutSlowly) {
    $('.errorParm').removeClass('errorParm');
    $('.errorEmptyParm').removeClass('errorEmptyParm');
    $('.errorTextHighlight').removeClass('errorTextHighlight');
    if (fadeOutSlowly) {
      return $(".errorMessageBox").fadeOut(1000, function() {
        return $(this).remove();
      });
    } else {
      return $(".errorMessageBox").remove();
    }
  };

}).call(this);
