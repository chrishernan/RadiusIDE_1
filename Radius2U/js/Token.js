// Generated by CoffeeScript 1.10.0
(function() {
  var Radius;

  Radius = window.Radius;

  Radius.Token = (function() {
    Token.String = "ST";

    Token.Number = "NU";

    Token.Word = "WD";

    Token.Symbol = "SY";

    Token.Operator = "OP";

    Token.Function = "FN";

    Token.Label = "LB";

    Token.Counter = "CT";

    Token.Array = "[]";

    Token.Object = "OB";

    Token.LVal = "LV";

    Token.RVal = "RV";

    Token.Command = "CM";

    Token.NoVal = "??";

    Token.Bool = "BL";

    Token.Eject = "!!";

    function Token(type, text, id, whichParm, start, length) {
      var sn;
      this.type = type;
      this.text = text;
      this.id = id != null ? id : 'none';
      this.whichParm = whichParm != null ? whichParm : 0;
      this.start = start != null ? start : 0;
      this.length = length != null ? length : 0;
      this.val = this.text;
      this.error = false;
      this.sym = "";
      this.depth = 0;
      this.serial = 0;
      if (this.type === Token.Word || this.type === Token.Operator) {
        this.val = this.text.toLowerCase();
      }
      if (this.type === Token.Counter) {
        this.val = +this.text;
      }
      if (this.type === Token.Number) {
        sn = SchemeNumber.fn["string->number"]("#e" + this.text);
        if (sn) {
          this.val = sn;
        } else {
          console.log("Token ctor: this token couldn't be handled by SchemeNumber:", this.text);
          this.val = null;
          this.error = true;
        }
      }
      if (this.type === Token.Symbol) {
        this.sym = this.text;
      }
    }

    return Token;

  })();


  /* a token is an object with these attributes:
  
    .va     a string, later also a SchemeNumber
    .ty     NUMBER, COMMAND, LVAL, RVAL, LABEL, FUNCTION, SYMBOL, OPERATOR (and WORD temporarily)
    .id     a DOM id
    .st     starting location in the DOM id's text
    .sy     same as .va for SYMBOLs or [ or ], otherwise ""
    .depth  nesting depth for (, ), [, ], comma, or operator
            also used in IF and WHILE blocks
    
    NUMBER:  starts with a digit, ok'd by SchemeNumber
    COMMAND: starts with #   (this will have to change)
    STRING:  anything enclosed in "" or ''
    SYMBOL:  matches validSymbol + - * / [ ] ? ( ) & . = , ! :
              or validSymbol2    <= >= != <- &&
    WORD:    anything else delimited; later transformed into one of the following
     OPERATOR:  a WORD or SYMBOL that matches validOperator
                  + - * / & && and or not ? [ . ?O ?B < = != <=
     FUNCTION:  a user-defined or built-in function name
     LABEL:     when followed by :  (as in [mylabel: 10]
                or when preceded by .  (as in variable.mylabel)
     LVAL:      when preceded by #ASSIGN
     RVAL:      a WORD that isn't one of the previous cases
   */

}).call(this);
